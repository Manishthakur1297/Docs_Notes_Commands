################################################################################
#
#
#				Microservices with Node.js and React
#
#
#
#################################################################################


################################ HEROKU DEPLOYMENT ############################## 

	git init
	heroku create
	git add .
	gti remote URL
	git commit -m "Commit"
	git push heroku master


############################### DOCKER SECTION ##################################

# DOCKER FILE(Dockerfile)

	FROM node:alpine
	
	WORKDIR /app
	COPY package.json ./
	RUN npm install
	COPY ./ ./

	CMD ["npm","start"]

# .dockerignore
	node_modules/


# DOCKER COMMANDS

	docker build -t mj/posts

	docker run [image_id or image_tag]

	docker run -it [image id or image tag] [cmd]  #docker run -it mj/posts sh

	docker ps

	docker exec -it [container id] [cmd]

	docker logs [container_id]



############################### KUBERNETES SECTION ##############################

# KUBERNETES FILE(posts.yaml)

	apiVersion: v1
	kind: Pod
	metadata:
		name: posts
	spec:
		constainers:
			- name: posts
			  image: mj/posts:0.0.1   	# 0.0.1 or latest(means it goes to docker hub to search file instead of local file)



# KUBERNETES COMMANDS

	kubectl get pods

	kubectl exec -it [pod_name] [cmd]

	kubectl logs [pod_name]

	kubectl delete pod [pod_name]

	kubectl apply -f [config file name]

	kubectl describe pod [pod_name]


# KUBERNETES COMMANDS(DEMO)

	#CREATE POD OBJECT
		kubectl apply -f posts.yaml

	#GET LIST OF PODS
		kubectl get pods


# KUBERNETES DEPLOYMENTS(posts-depl.yaml)

	apiVersion: apps/v1
	kind: Deployment
	metadata:
		name: posts-depl
	spec:
		replicas: 1
		selector:
			matchLabels:
				app: posts
		template:
			metadata:
				labels:
					app: posts
			spec:
				containers:
					- name: posts
					  image: mj/posts:0.0.1

# KUBERNETES DEPLOYMENTS COMMANDS

	kubectl get deployments

	kubectl get pods

	kubectl delete pod [depl_name] (deploy will create new pod as soon as we delete)

	kubectl describe deployment [depl_name]

	kubectl apply -f [config file name]



# KUBERNETES UPDATE DEPLOYMENTS

	METHOD #1: (NOT Widely Used)
		- MAke a change to the project
		- Rebuild the image, specifying new version (docker build -t mj/posts:0.0.5 .)
		- Update version of image in deployment config file
		- RUN Command - kubectl apply -f [depl file name]

	METHOD #2: (Prefered Way to Update Deployments)
		- Deployment must be using "latest" tag in Pod spec section ()
		- Make an update to the code files
		- Rebuild the image without specifying new version (docker build -t mj/posts .)
		- Push to DockerHub -> RUN Command -> [ docker push mj/posts ]
		- RUN Command -> [ kubectl rollout restart deployment [depl name] ]

	- TO VERIFY COMMANDS
		- kubectl get deployments
		- kubectl get pods(timestamp)
		- kubectl logs [depl_name]


# KUBERNETES - NETWORKING WITH SERVICES

	# TYPES OF SERVICES
		1. CLUSTER IP (Generally Used) (INSIDE CLUSTER)
			- Easy to remember URL to access a pod
			- Only EXPOSES PODS in the CLUSTER

		2. NODE PORT
			- Makes a POD accessible from outside the cluster
			- ONLY used for DEV PURPOSES

		3. LOAD BALANCER (Generally Used) (OUTSIDE CLUSTER)
			- Makes a POD accessible from outside the cluster
			- Right way to expose POD to the outside world

		4. EXTERNAL NAME (ADVANCED or complex)
			- Redirects are in-cluster request to a CNAME URL


	1. NODEPORT SERVICE FILE(posts-srv.yaml) [DEVELOPMENT PURPOSE]

		apiVersion: v1
		kind: Service
		metadata:
			name: posts-srv
		spec:
			type: NodePort
			selector:
				app: posts
			ports:
				- name: posts
				  protocol: TCP
				  port: 4000
				  targetPort: 4000

		
		- kubectl apply -f posts-srv.yaml

		- kubectl get services

		- kubectl describe service posts-srv








