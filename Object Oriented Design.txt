Object Oriented Design

- Class Diagram
 - It shows how different entities (people, things, and data) relate to each other
 - Widely used in the modeling of object-oriented systems because they are the only UML diagrams that can be mapped directly to object-oriented languages.
 - It describes the attributes and operations of a class and also the constraints imposed on the system.

 - Purpose
  - Analysis and design of the static view of an application
  - To describe the responsibilities of a system;
  - To provide a base for component and deployment diagrams
  - Forward and reverse engineering.

  - Diagram
   - Three horizontal sections
    - The upper section shows the class’s name
    - The middle section contains the properties of the class
    - The lower section contains the class’s operations (or “methods”)

  - Relationships

   - Association
    - If two classes in a model need to communicate with each other, there must be a link between them.
    - By default, associations are always assumed to be bi-directional. (FlightInstance Class and Pilot Class)
    - By contrast, in a uni-directional association, two classes are related - but only one class knows that the relationship exists. (Flight class knows about Aircraft Class)


   - Multiplicity
    - Multiplicity indicates how many instances of a class participate in the relationship.
    - It is a constraint that specifies the range of permitted cardinalities between two classes.
    - For example - one FlightInstance will have two Pilots, while a Pilot can have many FlightInstances.


   - Aggregation
    - Aggregation is a special type of association used to model a “whole to its parts” relationship.
    - Aggregation implies a relationship where the child can exist independently of the parent.


   - Composition
    - Composition implies a relationship where the child cannot exist independent of the parent.
    - Example - WeeklySchedule is composed in Flight which means when Flight lifecycle ends, WeeklySchedule automatically gets destroyed.

   - Generalization
    - It is the mechanism for combining similar classes of objects into a single, more general class.
    - For Example - Crew, Pilot, and Admin, all are Person.

   - Dependency
    - It is a relationship in which one class, the client, uses or depends on another class, the supplier.
    - Example - FlightReservation depends on Payment.

   - Abstract class
    - It is identified by specifying its name in italics.
    - Example - Person and Account classes are abstract classes.